========================================
combined_files_part1.txt
========================================


========================================
combined_files_part2.txt
========================================
// File not found: combined_files_part2.txt

========================================
middleware.ts
========================================
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// List of all public paths
const publicPaths = [
  '/signin',
  '/signup',
  '/reset-password',
  '/mobile-not-supported', // Added the mobile-not-supported page to public paths
  // Add any other public paths here
];

// List of paths that should redirect to dashboard if authenticated
const authPaths = [
  '/signin',
  '/signup',
];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Handle API routes and static files
  if (
    pathname.startsWith('/_next') || // Next.js static files
    pathname.startsWith('/api') ||   // API routes
    pathname.startsWith('/static') || // Static files
    pathname.includes('.') // Files with extensions (images, etc.)
  ) {
    return NextResponse.next();
  }

  // Detect mobile user agents
  const userAgent = request.headers.get('user-agent') || '';
  const mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;

  if (mobileRegex.test(userAgent)) {
    // Allow access to the mobile-not-supported page
    if (pathname === '/mobile-not-supported') {
      return NextResponse.next();
    }

    // Redirect mobile users to /mobile-not-supported
    return NextResponse.redirect(new URL('/mobile-not-supported', request.url));
  }

  // Get the token from cookies
  const token = request.cookies.get('__session')?.value;

  // Check if the path is public
  const isPublicPath = publicPaths.some(path => pathname.startsWith(path));
  
  // Check if the path is an auth path that should redirect when authenticated
  const isAuthPath = authPaths.some(path => pathname.startsWith(path));

  // If path is public and user is not authenticated, allow access
  if (isPublicPath && !token) {
    return NextResponse.next();
  }

  // If user is authenticated and trying to access auth paths, redirect to dashboard
  if (token && isAuthPath) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }

  // If path is not public and user is not authenticated, redirect to signin
  if (!isPublicPath && !token) {
    const redirectUrl = new URL('/signin', request.url);
    // Optional: Add the original path as a redirect parameter
    redirectUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(redirectUrl);
  }

  // Allow access to all other routes
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};


========================================
app/layout.tsx
========================================
// app/layout.tsx

import '../styles/globals.css';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { Providers } from './providers';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Pet Health Tracker',
  description: 'Track and manage your pet\'s health records',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

========================================
app/not-found.tsx
========================================
// app/not-found.tsx

import Link from 'next/link'
 
export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h2 className="text-4xl font-bold mb-4">404 - Page Not Found</h2>
      <p className="text-gray-600 mb-4">Could not find requested resource</p>
      <Link 
        href="/dashboard" 
        className="text-blue-500 hover:text-blue-700 underline"
      >
        Return to Dashboard
      </Link>
    </div>
  )
}

========================================
app/page.tsx
========================================
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/context/auth-context';
import { Loading } from '@/components/ui/loading';

export default function Home() {
  const { user, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading) {
      if (user) {
        router.push('/dashboard');
      } else {
        router.push('/signin');
      }
    }
  }, [user, isLoading, router]);

  // Show loading state while checking auth
  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <Loading size={32} />
      </div>
    );
  }

  // This will briefly show while redirecting
  return null;
}

========================================
app/providers.tsx
========================================
'use client';

import { useEffect, useState } from 'react';
import { AuthProvider } from '@/lib/context/auth-context';
import { TooltipProvider } from '@/components/ui/tooltip';
import { Toaster } from '@/components/ui/toaster';

export function Providers({ children }: { children: React.ReactNode }) {
  // Handle hydration mismatch
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  return (
    <AuthProvider>
      <TooltipProvider>
        {children}
      </TooltipProvider>
      <Toaster />
    </AuthProvider>
  );
}

========================================
app/(auth)/layout.tsx
========================================
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <div className="mx-auto w-auto relative h-12 flex items-center justify-center">
            <h1 className="text-3xl font-bold">Pet Health Tracker</h1>
          </div>
        </div>

        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
}

========================================
app/(auth)/reset-password/page.tsx
========================================
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useAuth } from '@/lib/context/auth-context';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Icons } from '@/components/icons';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

export default function ResetPasswordPage() {
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const { resetPassword } = useAuth();
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      await resetPassword(email);
      setIsSuccess(true);
      toast({
        title: "Email sent",
        description: "Check your email for password reset instructions",
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Could not send reset email. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl font-bold">Reset password</CardTitle>
          <CardDescription>
            Enter your email address and we'll send you a link to reset your password
          </CardDescription>
        </CardHeader>
        {!isSuccess ? (
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
            </CardContent>
            <CardFooter className="flex flex-col space-y-4">
              <Button 
                type="submit" 
                className="w-full"
                disabled={isLoading}
              >
                {isLoading ? (
                  <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                ) : null}
                Send reset link
              </Button>
              <div className="text-center text-sm">
                Remember your password?{' '}
                <Link 
                  href="/signin"
                  className="font-medium text-blue-600 hover:text-blue-500"
                >
                  Sign in
                </Link>
              </div>
            </CardFooter>
          </form>
        ) : (
          <CardContent className="space-y-4">
            <div className="flex flex-col items-center justify-center space-y-4 py-6">
              <Icons.mailCheck className="h-12 w-12 text-green-500" />
              <div className="text-center">
                <h3 className="text-lg font-medium">Check your email</h3>
                <p className="text-sm text-gray-500 mt-1">
                  We've sent you a link to reset your password
                </p>
              </div>
              <Button 
                variant="outline" 
                className="mt-4"
                onClick={() => setIsSuccess(false)}
              >
                Try another email
              </Button>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}

========================================
app/(auth)/signin/page.tsx
========================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useAuth } from '@/lib/context/auth-context';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Icons } from '@/components/icons';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

export default function SignInPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { signIn, signInWithGoogle } = useAuth();
  const router = useRouter();
  const { toast } = useToast();

  // New state for handling form errors
  const [errors, setErrors] = useState({ email: '', password: '' });

  const validateForm = () => {
    let valid = true;
    const newErrors = { email: '', password: '' };

    if (!email) {
      newErrors.email = 'Email is required';
      valid = false;
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'Email is invalid';
      valid = false;
    }

    if (!password) {
      newErrors.password = 'Password is required';
      valid = false;
    }

    setErrors(newErrors);
    return valid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      await signIn(email, password);
      router.push('/dashboard');
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error.message || 'Invalid email or password',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setIsLoading(true);
    try {
      await signInWithGoogle();
      router.push('/dashboard');
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error.message || 'Could not sign in with Google',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="border-0 shadow-none sm:border sm:shadow-sm max-w-md mx-auto">
      <CardHeader className="space-y-1 text-center">
        <CardTitle className="text-2xl font-bold">Welcome Back!</CardTitle>
        <CardDescription>
          Sign in to continue to your dashboard
        </CardDescription>
      </CardHeader>
      <form onSubmit={handleSubmit} noValidate>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              disabled={isLoading}
              aria-invalid={errors.email ? 'true' : 'false'}
              aria-describedby="email-error"
            />
            {errors.email && (
              <p id="email-error" className="text-red-600 text-sm">
                {errors.email}
              </p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="password" className="flex justify-between">
              Password
              <Link
                href="/reset-password"
                className="text-sm text-primary hover:underline"
              >
                Forgot?
              </Link>
            </Label>
            <Input
              id="password"
              type="password"
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              disabled={isLoading}
              aria-invalid={errors.password ? 'true' : 'false'}
              aria-describedby="password-error"
            />
            {errors.password && (
              <p id="password-error" className="text-red-600 text-sm">
                {errors.password}
              </p>
            )}
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <Button type="submit" className="w-full" disabled={isLoading}>
            {isLoading ? (
              <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
            ) : null}
            Sign In
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={handleGoogleSignIn}
            className="w-full"
            disabled={isLoading}
          >
            {isLoading && (
              <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
            )}
            {!isLoading && <Icons.google className="mr-2 h-4 w-4" />}
            Sign in with Google
          </Button>
          <div className="text-center text-sm">
            Don't have an account?{' '}
            <Link href="/signup" className="text-primary hover:underline">
              Sign up
            </Link>
          </div>
        </CardFooter>
      </form>
    </Card>
  );
}


========================================
app/(auth)/signup/page.tsx
========================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useAuth } from '@/lib/context/auth-context';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Icons } from '@/components/icons';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

export default function SignUpPage() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { signUp, signInWithGoogle } = useAuth();
  const router = useRouter();
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Passwords do not match",
      });
      return;
    }

    setIsLoading(true);

    try {
      await signUp(email, password, name);
      toast({
        title: "Account created",
        description: "Please verify your email address",
      });
      router.push('/dashboard');
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Could not create account",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      setIsLoading(true);
      await signInWithGoogle();
      router.push('/dashboard');
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Could not sign in with Google",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl font-bold">Create an account</CardTitle>
          <CardDescription>
            Enter your details to create your account
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                type="text"
                placeholder="Enter your name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
              <Input
                id="confirmPassword"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full"
              disabled={isLoading}
            >
              {isLoading ? (
                <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
              ) : null}
              Create account
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={handleGoogleSignIn}
              className="w-full"
              disabled={isLoading}
            >
              {isLoading ? (
                <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Icons.google className="mr-2 h-4 w-4" />
              )}
              Sign up with Google
            </Button>
            <div className="text-center text-sm">
              Already have an account?{' '}
              <Link 
                href="/signin"
                className="font-medium text-blue-600 hover:text-blue-500"
              >
                Sign in
              </Link>
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}

========================================
app/(protected)/layout.tsx
========================================
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/context/auth-context';
import Sidebar from '@/components/Sidebar';
import { Loading } from '@/components/ui/loading';

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { user, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !user) {
      router.push('/signin');
    }
  }, [user, isLoading, router]);

  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <Loading size={32} />
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="flex min-h-screen bg-gray-100">
      <Sidebar />
      <main className="flex-1 p-6">
        {children}
      </main>
    </div>
  );
}

========================================
app/(protected)/dashboard/page.tsx
========================================
'use client';

import { useEffect, useState } from 'react';
import { useAuth } from '@/lib/context/auth-context';
import { useRouter } from 'next/navigation';
import {
  collection,
  query,
  where,
  onSnapshot,
  Timestamp,
  orderBy,
  limit,
} from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { format, isAfter, parseISO, startOfDay } from 'date-fns';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Calendar,
  Clock,
  Activity,
  AlertCircle,
  PlusCircle,
  ArrowRight,
  PawPrint,
  Pill,
} from 'lucide-react';
import { Loading } from '@/components/ui/loading';
import { AddPetDialog } from '@/components/AddPetDialog';
import { Badge } from "@/components/ui/badge";
import { capitalizeFirst, capitalizeWords } from '@/lib/utils';

interface DashboardStats {
  totalPets: number;
  upcomingAppointments: number;
  dueMedications: number;
  healthAlerts: number;
}

interface Pet {
  id: string;
  name: string;
  species: string;
  breed?: string;
  imageUrl?: string;
  userId: string;
  createdAt: Timestamp;
}

interface Appointment {
  id: string;
  petId: string;
  petName: string;
  type: string;
  date: string;
  time: string;
  status: string;
  userId: string;
}

interface Medication {
  id: string;
  petId: string;
  petName: string;
  name: string;
  type: 'medication' | 'vaccination' | 'procedure';
  date: string;
  nextDueDate?: string;
  prescribedBy?: string;
  status: 'active' | 'completed' | 'discontinued';
  userId: string;
}

interface DashboardData {
  recentPets: Pet[];
  recentAppointments: Appointment[];
  recentMedications: Medication[];
}

export default function DashboardPage() {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState<DashboardStats>({
    totalPets: 0,
    upcomingAppointments: 0,
    dueMedications: 0,
    healthAlerts: 0,
  });
  const [data, setData] = useState<DashboardData>({
    recentPets: [],
    recentAppointments: [],
    recentMedications: [],
  });
  const router = useRouter();

  useEffect(() => {
    if (!user) return;

    const today = startOfDay(new Date());

    const petsQuery = query(
      collection(db, 'pets'),
      where('userId', '==', user.uid),
      orderBy('createdAt', 'desc'),
      limit(5)
    );

    const appointmentsQuery = query(
      collection(db, 'appointments'),
      where('userId', '==', user.uid),
      where('status', '==', 'scheduled'),
      orderBy('date', 'asc'),
      limit(5)
    );

    const medicationsQuery = query(
      collection(db, 'medications'),
      where('userId', '==', user.uid),
      where('status', '==', 'active'),
      orderBy('nextDueDate', 'asc'),
      limit(5)
    );

    const unsubPets = onSnapshot(petsQuery, (snapshot) => {
      const pets: Pet[] = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Pet));
      setStats(prev => ({ ...prev, totalPets: snapshot.size }));
      setData(prev => ({ ...prev, recentPets: pets }));
    });

    const unsubAppointments = onSnapshot(appointmentsQuery, (snapshot) => {
      const appointments: Appointment[] = snapshot.docs
        .map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Appointment))
        .filter(apt => isAfter(parseISO(apt.date), today));

      setStats(prev => ({ ...prev, upcomingAppointments: appointments.length }));
      setData(prev => ({ ...prev, recentAppointments: appointments }));
    });

    const unsubMedications = onSnapshot(medicationsQuery, (snapshot) => {
      const medications: Medication[] = snapshot.docs
        .map(doc => ({
          id: doc.id,
          ...doc.data()
        } as Medication))
        .filter(med => med.nextDueDate && isAfter(parseISO(med.nextDueDate), today));

      setStats(prev => ({ 
        ...prev, 
        dueMedications: medications.length,
        healthAlerts: medications.length + (data.recentAppointments?.length || 0)
      }));
      setData(prev => ({ ...prev, recentMedications: medications }));
      setIsLoading(false);
    });

    return () => {
      unsubPets();
      unsubAppointments();
      unsubMedications();
    };
  }, [user]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-[calc(100vh-2rem)]">
        <Loading size={32} />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Welcome, {user?.displayName || 'User'}</h1>
        <AddPetDialog key="add-pet-dialog">
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Pet
          </Button>
        </AddPetDialog>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="flex flex-col items-center justify-center p-6">
            <PawPrint className="h-8 w-8 mb-2 text-primary" />
            <p className="text-2xl font-bold">{stats.totalPets}</p>
            <p className="text-sm text-muted-foreground">Total Pets</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="flex flex-col items-center justify-center p-6">
            <Calendar className="h-8 w-8 mb-2 text-primary" />
            <p className="text-2xl font-bold">{stats.upcomingAppointments}</p>
            <p className="text-sm text-muted-foreground">Upcoming Appointments</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="flex flex-col items-center justify-center p-6">
            <Pill className="h-8 w-8 mb-2 text-primary" />
            <p className="text-2xl font-bold">{stats.dueMedications}</p>
            <p className="text-sm text-muted-foreground">Due Medications</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="flex flex-col items-center justify-center p-6">
            <Activity className="h-8 w-8 mb-2 text-primary" />
            <p className="text-2xl font-bold">{stats.healthAlerts}</p>
            <p className="text-sm text-muted-foreground">Health Alerts</p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="pets" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="pets">Recent Pets</TabsTrigger>
          <TabsTrigger value="appointments">Upcoming Appointments</TabsTrigger>
          <TabsTrigger value="medications">Due Medications</TabsTrigger>
        </TabsList>
        <TabsContent value="pets">
          {data.recentPets.length === 0 ? (
            <Card>
              <CardContent className="flex flex-col items-center justify-center p-6">
                <PawPrint className="h-12 w-12 text-muted-foreground mb-4" />
                <p className="text-lg text-center mb-4">No pets added yet. Add your first pet to get started!</p>
                <AddPetDialog key="empty-state-add-pet">
                  <Button>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Add Your First Pet
                  </Button>
                </AddPetDialog>
              </CardContent>
            </Card>
          ) : (
            <ScrollArea className="h-[calc(100vh-24rem)]">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {data.recentPets.map((pet) => (
                  <Card 
                    key={pet.id} 
                    className="cursor-pointer hover:bg-accent transition-colors" 
                    onClick={() => router.push(`/pets/${pet.id}`)}
                  >
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-4">
                        <div className="flex-1 space-y-1">
                          <h3 className="text-lg font-semibold">{pet.name}</h3>
                          <p className="text-sm text-muted-foreground">
                            {capitalizeFirst(pet.species)} • {pet.breed ? capitalizeFirst(pet.breed) : 'No breed specified'}
                          </p>
                        </div>
                        <ArrowRight className="h-5 w-5 text-primary" />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          )}
        </TabsContent>
        <TabsContent value="appointments">
          <Card>
            <CardContent className="p-6">
              {data.recentAppointments.length === 0 ? (
                <div className="text-center py-4">
                  <Calendar className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <p className="text-lg">No upcoming appointments</p>
                </div>
              ) : (
                <ScrollArea className="h-[calc(100vh-24rem)]">
                  <div className="space-y-4">
                    {data.recentAppointments.map((apt) => (
                      <div 
                        key={apt.id} 
                        className="flex justify-between items-center p-4 bg-accent rounded-lg cursor-pointer hover:bg-accent/70"
                        onClick={() => router.push(`/pets/${apt.petId}/appointments`)}
                      >
                        <div>
                          <div className="flex items-center gap-2 mb-1">
                            <Badge>{capitalizeWords(apt.type)}</Badge>
                            <span className="text-muted-foreground">•</span>
                            <span className="text-muted-foreground">{apt.petName}</span>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            {format(parseISO(apt.date), 'PPP')} at {format(parseISO(`2000-01-01T${apt.time}`), 'h:mm a')}
                          </p>
                        </div>
                        <Button variant="outline" size="sm">
                          View
                        </Button>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="medications">
          <Card>
            <CardContent className="p-6">
              {data.recentMedications.length === 0 ? (
                <div className="text-center py-4">
                  <Pill className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <p className="text-lg">No medications due</p>
                </div>
              ) : (
                <ScrollArea className="h-[calc(100vh-24rem)]">
                  <div className="space-y-4">
                    {data.recentMedications.map((med) => (
                      <div 
                        key={med.id} 
                        className="flex justify-between items-center p-4 bg-accent rounded-lg cursor-pointer hover:bg-accent/70"
                        onClick={() => router.push(`/pets/${med.petId}/medications`)}
                      >
                        <div>
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant={med.type === 'medication' ? 'default' : med.type === 'vaccination' ? 'secondary' : 'outline'}>
                              {capitalizeFirst(med.type)}
                            </Badge>
                            <span className="text-muted-foreground">•</span>
                            <span className="text-muted-foreground">{med.petName}</span>
                          </div>
                          <p className="font-medium">{med.name}</p>
                          {med.nextDueDate && (
                            <p className="text-sm text-muted-foreground">
                              Due: {format(parseISO(med.nextDueDate), 'PPP')}
                            </p>
                          )}
                        </div>
                        <Button variant="outline" size="sm">
                          View
                        </Button>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

========================================
app/(protected)/pets/[id]/error.tsx
========================================
// app/pets/[id]/error.tsx

'use client'
 
import { useEffect } from 'react'
import { Button } from "@/components/ui/button"
 
export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    console.error(error)
  }, [error])
 
  return (
    <div className="flex flex-col items-center justify-center h-screen space-y-4">
      <div className="space-y-2 text-center">
        <h2 className="text-2xl font-bold">Something went wrong!</h2>
        <p className="text-muted-foreground">
          There was a problem loading the pet information.
        </p>
      </div>
      <Button
        onClick={() => reset()}
      >
        Try again
      </Button>
    </div>
  )
}

========================================
app/(protected)/pets/[id]/layout.tsx
========================================
// app/pets/[id]/layout.tsx

import { Suspense } from 'react'
import PetOverviewLoading from './loading'

export default function PetOverviewLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <Suspense fallback={<PetOverviewLoading />}>
      {children}
    </Suspense>
  )
}

========================================
app/(protected)/pets/[id]/loading.tsx
========================================
// app/pets/[id]/loading.tsx

import { Skeleton } from "@/components/ui/skeleton"
import { Card, CardContent, CardHeader } from "@/components/ui/card"

export default function PetOverviewLoading() {
  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Pet Header Skeleton */}
      <div className="flex items-start justify-between">
        <div className="flex items-center space-x-4">
          <Skeleton className="h-24 w-24 rounded-full" />
          <div className="space-y-2">
            <Skeleton className="h-8 w-48" />
            <Skeleton className="h-4 w-32" />
          </div>
        </div>
        <Skeleton className="h-10 w-24" />
      </div>

      {/* Quick Stats Skeleton */}
      <div className="grid gap-4 md:grid-cols-4">
        {[...Array(4)].map((_, i) => (
          <Card key={i}>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <Skeleton className="h-4 w-24" />
              <Skeleton className="h-4 w-4" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-8 w-16 mb-2" />
              <Skeleton className="h-3 w-32" />
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Tabs Skeleton */}
      <div className="space-y-4">
        <div className="flex space-x-2">
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className="h-10 w-24" />
          ))}
        </div>

        {/* Content Skeleton */}
        <div className="space-y-4">
          {[...Array(3)].map((_, i) => (
            <Card key={i}>
              <CardContent className="pt-6">
                <div className="flex justify-between items-center">
                  <div className="space-y-2">
                    <Skeleton className="h-5 w-32" />
                    <Skeleton className="h-4 w-24" />
                  </div>
                  <Skeleton className="h-4 w-24" />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )
}

========================================
app/(protected)/pets/[id]/not-found.tsx
========================================
// app/pets/[id]/not-found.tsx

import Link from 'next/link'
import { Button } from "@/components/ui/button"
 
export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center h-screen space-y-4">
      <div className="space-y-2 text-center">
        <h2 className="text-2xl font-bold">Pet Not Found</h2>
        <p className="text-muted-foreground">
          Could not find the requested pet.
        </p>
      </div>
      <Button asChild>
        <Link href="/dashboard">
          Return to Dashboard
        </Link>
      </Button>
    </div>
  )
}

========================================
app/(protected)/pets/[id]/page.tsx
========================================
// app/pets/[id]/page.tsx

import { Suspense } from 'react';
import { PetOverviewClient } from './pet-overview-client';
import { Loading } from '@/components/ui/loading';

interface PetOverviewPageProps {
  params: Promise<{ id: string }>;
}

export default async function PetOverviewPage({ params }: PetOverviewPageProps) {
  const { id } = await params;
  return (
    <Suspense fallback={<Loading />}>
      <PetOverviewClient petId={id} />
    </Suspense>
  );
}



========================================
app/(protected)/pets/[id]/pet-overview-client.tsx
========================================
'use client';

import { useState, useEffect } from 'react';
import { doc, getDoc, collection, query, where, limit, onSnapshot, Timestamp, orderBy } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Pet, Appointment, MedicalRecord, WeightRecord } from '@/types';
import { useAuth } from '@/lib/context/auth-context';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { Calendar, Pill, Weight, Edit, Cake, PawPrint, Clock, AlertCircle } from 'lucide-react';
import { EditPetDialog } from "@/components/EditPetDialog";
import { AddMedicationDialog } from "@/components/AddMedicationDialog";
import { capitalizeFirst, capitalizeWords } from '@/lib/utils';
import { parseISO, format, formatDistanceToNow, isAfter, startOfDay } from 'date-fns';
import { useRouter } from 'next/navigation';
import { AddAppointmentDialog } from '@/components/AddAppointmentDialog';

interface PetOverviewClientProps {
  petId: string;
}

export function PetOverviewClient({ petId }: PetOverviewClientProps) {
  const [pet, setPet] = useState<Pet | null>(null);
  const [upcomingAppointments, setUpcomingAppointments] = useState<Appointment[]>([]);
  const [recentMedications, setRecentMedications] = useState<MedicalRecord[]>([]);
  const [weightHistory, setWeightHistory] = useState<WeightRecord[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const router = useRouter();
  const { user } = useAuth();
  const today = startOfDay(new Date());

  useEffect(() => {
    if (!petId || !user) return;

    const fetchPetData = async () => {
      try {
        const petDoc = await getDoc(doc(db, 'pets', petId));

        // Verify pet ownership
        if (!petDoc.exists() || petDoc.data()?.userId !== user.uid) {
          router.push('/dashboard');
          toast({
            variant: "destructive",
            title: "Error",
            description: "Pet not found or access denied.",
          });
          return;
        }

        setPet({ id: petDoc.id, ...petDoc.data() } as Pet);

        const appointmentsQuery = query(
          collection(db, 'appointments'),
          where('petId', '==', petId),
          where('userId', '==', user.uid),
          where('status', '==', 'scheduled'),
          limit(3)
        );

        const medicationsQuery = query(
          collection(db, 'medications'),
          where('petId', '==', petId),
          where('userId', '==', user.uid),
          where('status', '==', 'active'),
          orderBy('nextDueDate', 'asc'),
          limit(3)
        );

        const weightQuery = query(
          collection(db, 'weights'),
          where('petId', '==', petId),
          where('userId', '==', user.uid),
          limit(5)
        );

        // Set up real-time listeners
        const unsubAppointments = onSnapshot(appointmentsQuery, (snapshot) => {
          const appointments: Appointment[] = [];
          snapshot.forEach((doc) => {
            const appointment = { id: doc.id, ...doc.data() } as Appointment;
            if (isAfter(parseISO(appointment.date), today)) {
              appointments.push(appointment);
            }
          });
          setUpcomingAppointments(appointments);
        });

        const unsubMedications = onSnapshot(medicationsQuery, (snapshot) => {
          const medications: MedicalRecord[] = [];
          snapshot.forEach((doc) => {
            const data = doc.data();
            medications.push({
              id: doc.id,
              ...data,
              createdAt: data.createdAt instanceof Timestamp 
                ? data.createdAt.toDate().toISOString()
                : data.createdAt,
              updatedAt: data.updatedAt instanceof Timestamp 
                ? data.updatedAt.toDate().toISOString()
                : data.updatedAt,
            } as MedicalRecord);
          });
          setRecentMedications(medications.filter(med => 
            med.nextDueDate && isAfter(parseISO(med.nextDueDate), today)
          ));
        });

        const unsubWeights = onSnapshot(weightQuery, (snapshot) => {
          const weights: WeightRecord[] = [];
          snapshot.forEach((doc) => {
            weights.push({ id: doc.id, ...doc.data() } as WeightRecord);
          });
          setWeightHistory(weights);
        });

        setIsLoading(false);

        return () => {
          unsubAppointments();
          unsubMedications();
          unsubWeights();
        };

      } catch (error) {
        console.error('Error fetching pet data:', error);
        toast({
          variant: "destructive",
          title: "Error",
          description: "Could not load pet information. Please try again.",
        });
        setIsLoading(false);
      }
    };

    fetchPetData();
  }, [petId, user, toast, router, today]);

  const formatDate = (dateString: string): string => {
    return format(parseISO(dateString), 'MMM d, yyyy');
  };

  const formatDateTime = (date: string, time?: string) => {
    if (!date) return '';
    const formattedDate = format(parseISO(date), 'MMM d, yyyy');
    if (time) {
      return `${formattedDate} at ${format(parseISO(`2000-01-01T${time}`), 'h:mm a')}`;
    }
    return formattedDate;
  };

  const calculateAge = (birthDate: string) => {
    const birth = parseISO(birthDate);
    const now = new Date();
    const age = formatDistanceToNow(birth);
    return { text: age, tooltip: `Born on ${formatDate(birthDate)}` };
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    );
  }

  if (!pet) {
    return (
      <div className="flex items-center justify-center h-screen">
        <p>Pet not found</p>
      </div>
    );
  }

  const ageInfo = calculateAge(pet.birthDate);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-start justify-between">
        <div className="flex items-center space-x-4">
          <Avatar className="h-24 w-24">
            {pet.imageUrl ? (
              <AvatarImage src={pet.imageUrl} alt={pet.name} />
            ) : (
              <AvatarFallback>
                <PawPrint className="h-12 w-12" />
              </AvatarFallback>
            )}
          </Avatar>
          <div>
            <h1 className="text-3xl font-bold">{pet.name}</h1>
            <p className="text-muted-foreground">
              {pet.breed ? `${capitalizeFirst(pet.species)} • ${pet.breed}` : capitalizeFirst(pet.species)}
            </p>
          </div>
        </div>
        <EditPetDialog pet={pet}>
          <Button variant="outline">
            <Edit className="mr-2 h-4 w-4" />
            Edit Pet
          </Button>
        </EditPetDialog>
      </div>

      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Age</CardTitle>
            <Cake className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="text-2xl font-bold cursor-help">{ageInfo.text}</div>
              </TooltipTrigger>
              <TooltipContent>{ageInfo.tooltip}</TooltipContent>
            </Tooltip>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Upcoming Appointments</CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{upcomingAppointments.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Medications</CardTitle>
            <Pill className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{recentMedications.length}</div>
            <p className="text-xs text-muted-foreground">
              {recentMedications.length === 1 ? 'medication' : 'medications'} due
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Latest Weight</CardTitle>
            <Weight className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {weightHistory[0] ? `${weightHistory[0].weight} ${weightHistory[0].unit}` : 'N/A'}
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="appointments" className="space-y-4">
        <TabsList>
          <TabsTrigger value="appointments">Appointments</TabsTrigger>
          <TabsTrigger value="medications">Medications</TabsTrigger>
          <TabsTrigger value="weight">Weight History</TabsTrigger>
        </TabsList>

        <TabsContent value="appointments" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">Upcoming Appointments</h2>
            <AddAppointmentDialog petId={petId}>
              <Button>
                <Calendar className="mr-2 h-4 w-4" />
                Schedule Appointment
              </Button>
            </AddAppointmentDialog>
          </div>
          <div className="grid gap-4">
            {upcomingAppointments.length === 0 ? (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                  <Calendar className="h-8 w-8 text-muted-foreground mb-4" />
                  <p className="text-lg font-medium">No upcoming appointments</p>
                  <p className="text-sm text-muted-foreground mb-4">Schedule a new appointment</p>
                  <AddAppointmentDialog petId={petId}>
                    <Button>
                      <Calendar className="mr-2 h-4 w-4" />
                      Schedule Appointment
                    </Button>
                  </AddAppointmentDialog>
                </CardContent>
              </Card>
            ) : (
              upcomingAppointments.map((appointment) => (
                <Card key={appointment.id} className="cursor-pointer hover:bg-accent/50" onClick={() => router.push(`/pets/${petId}/appointments`)}>
                  <CardContent className="flex justify-between items-center p-6">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <Badge>{capitalizeFirst(appointment.type)}</Badge>
                        {appointment.status === 'scheduled' && (
                          <Badge variant="outline">Scheduled</Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        {formatDateTime(appointment.date, appointment.time)}
                      </p>
                      {appointment.clinic && (
                        <p className="text-sm text-muted-foreground flex items-center gap-2">
                          <Clock className="h-4 w-4" />
                          {appointment.clinic}
                        </p>
                      )}
                    </div>
                    <Button variant="outline" size="sm">
                      View Details
                    </Button>
                  </CardContent>
                </Card>
              ))
            )}
            {upcomingAppointments.length > 0 && (
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => router.push(`/pets/${petId}/appointments`)}
              >
                View All Appointments
              </Button>
            )}
          </div>
        </TabsContent>

        <TabsContent value="medications" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">Current Medications</h2>
            <AddMedicationDialog petId={pet.id} petName={pet.name}>
              <Button>
                <Pill className="mr-2 h-4 w-4" />
                Add Medication
              </Button>
            </AddMedicationDialog>
          </div>
          <ScrollArea className="h-[calc(100vh-24rem)]">
            <div className="grid gap-4">
              {recentMedications.length === 0 ? (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                    <Pill className="h-8 w-8 text-muted-foreground mb-4" />
                    <p className="text-lg font-medium">No active medications</p>
                    <p className="text-sm text-muted-foreground mb-4">
                      Add medications or treatments for your pet
                    </p>
                    <AddMedicationDialog petId={pet.id} petName={pet.name}>
                      <Button>
                        <Pill className="mr-2 h-4 w-4" />
                        Add Medication
                      </Button>
                    </AddMedicationDialog>
                  </CardContent>
                </Card>
              ) : (
                recentMedications.map((medication) => (
                  <Card key={medication.id} className="cursor-pointer hover:bg-accent/50">
                    <CardContent className="flex justify-between items-center p-6">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <Badge variant={medication.type === 'medication' ? 'default' : 
                            medication.type === 'vaccination' ? 'secondary' : 'outline'}>
                            {capitalizeFirst(medication.type)}
                          </Badge>
                          {medication.status && (
                            <Badge variant="outline">
                              {capitalizeFirst(medication.status)}
                            </Badge>
                          )}
                        </div>
                        <p className="font-medium">{medication.name}</p>
                        {medication.nextDueDate && (
                          <p className="text-sm text-muted-foreground flex items-center gap-2">
                            <Clock className="h-4 w-4" />
                            Due: {format(parseISO(medication.nextDueDate), 'PPP')}
                          </p>
                        )}
                        {medication.prescribedBy && (
                          <p className="text-sm text-muted-foreground">
                            Prescribed by: {medication.prescribedBy}
                          </p>
                        )}
                        {medication.notes && (
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <div className="flex items-center gap-2 text-sm text-muted-foreground cursor-help">
                                <AlertCircle className="h-4 w-4" />
                                <span className="truncate max-w-[300px]">{medication.notes}</span>
                              </div>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-[300px] whitespace-normal">{medication.notes}</p>
                            </TooltipContent>
                          </Tooltip>
                        )}
                      </div>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => router.push(`/pets/${pet.id}/medications`)}
                      >
                        View Details
                      </Button>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </ScrollArea>
        </TabsContent>

        <TabsContent value="weight" className="space-y-4">
          <div className="grid gap-4">
            {weightHistory.length === 0 ? (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                  <Weight className="h-8 w-8 text-muted-foreground mb-4" />
                  <p className="text-lg font-medium">No weight records</p>
                  <p className="text-sm text-muted-foreground">
                    No weight history recorded yet
                  </p>
                </CardContent>
              </Card>
            ) : (
              weightHistory.map((weight) => (
                <Card key={weight.id}>
                  <CardContent className="pt-6">
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 className="font-semibold">{weight.weight} {weight.unit}</h3>
                        <p className="text-sm text-muted-foreground">
                          {formatDate(weight.date)}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}


========================================
app/(protected)/pets/[id]/appointments/appointments-client.tsx
========================================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { db } from '@/lib/firebase';
import { useAuth } from '@/lib/context/auth-context';
import { 
  collection, 
  query, 
  where, 
  orderBy, 
  onSnapshot,
  Timestamp,
  doc,
  updateDoc,
  serverTimestamp,
  writeBatch,
  getDoc
} from 'firebase/firestore';
import { format, isAfter, isBefore, startOfDay, parseISO, endOfDay } from 'date-fns';
import { Plus, Calendar } from 'lucide-react';
import { Appointment } from '@/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AddAppointmentDialog } from '@/components/AddAppointmentDialog';
import { AppointmentCard } from '@/components/AppointmentCard';
import { useToast } from '@/hooks/use-toast';
import { Loading } from '@/components/ui/loading';
import { capitalizeWords } from '@/lib/utils';

interface AppointmentsClientProps {
  petId: string;
}

export function AppointmentsClient({ petId }: AppointmentsClientProps) {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const { user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!user || !petId) return;

    // First verify pet ownership
    const verifyPetOwnership = async () => {
      try {
        const petDoc = await getDoc(doc(db, 'pets', petId));
        if (!petDoc.exists() || petDoc.data()?.userId !== user.uid) {
          toast({
            variant: "destructive",
            title: "Error",
            description: "Pet not found or access denied.",
          });
          router.push('/dashboard');
          return false;
        }
        return true;
      } catch (error) {
        console.error('Error verifying pet ownership:', error);
        return false;
      }
    };

    const setupAppointments = async () => {
      const hasAccess = await verifyPetOwnership();
      if (!hasAccess) return;

      const appointmentsQuery = query(
        collection(db, 'appointments'),
        where('petId', '==', petId),
        where('userId', '==', user.uid),
        orderBy('date', 'asc')
      );

      const unsubscribe = onSnapshot(
        appointmentsQuery,
        (snapshot) => {
          const appointmentsData: Appointment[] = [];
          snapshot.forEach((doc) => {
            appointmentsData.push({ id: doc.id, ...doc.data() } as Appointment);
          });
          setAppointments(appointmentsData);
          setIsLoading(false);

          // Update past appointments
          updatePastAppointments(appointmentsData);
        },
        (error) => {
          console.error('Error fetching appointments:', error);
          toast({
            variant: "destructive",
            title: "Error",
            description: "Could not load appointments. Please try again."
          });
          setIsLoading(false);
        }
      );

      return () => unsubscribe();
    };

    setupAppointments();
  }, [petId, user, toast, router]);

  // Function to update past appointments to completed
  const updatePastAppointments = async (appointments: Appointment[]) => {
    if (!user) return;

    const today = endOfDay(new Date());
    const batch = writeBatch(db);
    let updateCount = 0;

    appointments.forEach((appointment) => {
      if (
        appointment.userId === user.uid && // Verify ownership
        isBefore(parseISO(appointment.date), today) && 
        appointment.status === 'scheduled'
      ) {
        const appointmentRef = doc(db, 'appointments', appointment.id);
        <div key={appointment.id}>
        <p>{capitalizeWords(appointment.type)}</p>
      </div>    
        batch.update(appointmentRef, {
          status: 'completed',
          updatedAt: serverTimestamp(),
        });
        updateCount++;
      }
    });

    if (updateCount > 0) {
      try {
        await batch.commit();
        toast({
          title: "Auto-Update Complete",
          description: `${updateCount} past ${updateCount === 1 ? 'appointment was' : 'appointments were'} marked as completed.`,
        });
      } catch (error) {
        console.error('Error updating past appointments:', error);
      }
    }
  };

  const now = startOfDay(new Date());

  const upcomingAppointments = appointments.filter(
    (appointment) => 
      isAfter(new Date(appointment.date), now) && 
      appointment.status === 'scheduled'
  );

  const pastAppointments = appointments.filter(
    (appointment) => 
      isBefore(new Date(appointment.date), now) || 
      appointment.status !== 'scheduled'
  ).sort((a, b) => {
    return parseISO(b.date).getTime() - parseISO(a.date).getTime();
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading size={32} />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Appointments</h1>
          <p className="text-muted-foreground">
            Manage your pet's appointments and check-ups
          </p>
        </div>
        <AddAppointmentDialog petId={petId}>
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            Add Appointment
          </Button>
        </AddAppointmentDialog>
      </div>

      <Tabs defaultValue="upcoming" className="space-y-4">
        <TabsList>
          <TabsTrigger value="upcoming">
            Upcoming ({upcomingAppointments.length})
          </TabsTrigger>
          <TabsTrigger value="past">
            Past ({pastAppointments.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="upcoming" className="space-y-4">
          {upcomingAppointments.length === 0 ? (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                <Calendar className="h-8 w-8 text-muted-foreground mb-4" />
                <p className="text-lg font-medium">No upcoming appointments</p>
                <p className="text-sm text-muted-foreground mb-4">
                  Schedule a new appointment for your pet
                </p>
                <AddAppointmentDialog petId={petId}>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Add Appointment
                  </Button>
                </AddAppointmentDialog>
              </CardContent>
            </Card>
          ) : (
            upcomingAppointments.map((appointment) => (
              <AppointmentCard
                key={appointment.id}
                appointment={appointment}
                isUpcoming={true}
              />
            ))
          )}
        </TabsContent>

        <TabsContent value="past" className="space-y-4">
          {pastAppointments.length === 0 ? (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                <Calendar className="h-8 w-8 text-muted-foreground mb-4" />
                <p className="text-lg font-medium">No past appointments</p>
                <p className="text-sm text-muted-foreground">
                  Past and completed appointments will appear here
                </p>
              </CardContent>
            </Card>
          ) : (
            pastAppointments.map((appointment) => (
              <AppointmentCard
                key={appointment.id}
                appointment={appointment}
                isUpcoming={false}
              />
            ))
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}

========================================
app/(protected)/pets/[id]/appointments/page.tsx
========================================
// app/pets/[id]/appointments/page.tsx
import { Suspense } from 'react';
import { AppointmentsClient } from './appointments-client';
import { Loading } from '@/components/ui/loading';

interface AppointmentsPageProps {
  params: Promise<{
    id: string;
  }>;
}

export default async function AppointmentsPage({ params }: AppointmentsPageProps) {
  const resolvedParams = await params;

  return (
    <Suspense fallback={<Loading />}>
      <AppointmentsClient petId={resolvedParams.id} />
    </Suspense>
  );
}


========================================
app/(protected)/pets/[id]/feeding/page.tsx
========================================
// app/pets/[id]/feeding-schedule/page.tsx

'use client';

import React from 'react';

export default function FeedingSchedulePage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold">Feeding Schedule</h1>
      <p className="mt-4 text-gray-600">Coming soon...</p>
    </div>
  );
}


========================================
app/(protected)/pets/[id]/medications/medications-client.tsx
========================================
// app/(protected)/pets/[id]/medications/medications-client.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { db } from '@/lib/firebase';
import { useAuth } from '@/lib/context/auth-context';
import { 
  collection, 
  query, 
  where, 
  orderBy, 
  onSnapshot,
  doc,
  getDoc,
  Timestamp,
} from 'firebase/firestore';
import { format, isAfter, parseISO } from 'date-fns';
import { Plus, Pill } from 'lucide-react';
import { MedicalRecord } from '@/types';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AddMedicationDialog } from '@/components/AddMedicationDialog';
import { MedicationCard } from '@/components/MedicationCard';
import { useToast } from '@/hooks/use-toast';
import { Loading } from '@/components/ui/loading';
import { ScrollArea } from '@/components/ui/scroll-area';

interface MedicationsClientProps {
  petId: string;
}

export function MedicationsClient({ petId }: MedicationsClientProps) {
  const [medications, setMedications] = useState<MedicalRecord[]>([]);
  const [petName, setPetName] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const { user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!user || !petId) return;

    // First verify pet ownership and get pet name
    const verifyPetOwnership = async () => {
      try {
        const petDoc = await getDoc(doc(db, 'pets', petId));
        if (!petDoc.exists() || petDoc.data()?.userId !== user.uid) {
          toast({
            variant: "destructive",
            title: "Error",
            description: "Pet not found or access denied.",
          });
          router.push('/dashboard');
          return false;
        }
        setPetName(petDoc.data().name);
        return true;
      } catch (error) {
        console.error('Error verifying pet ownership:', error);
        return false;
      }
    };

    const setupMedications = async () => {
      const hasAccess = await verifyPetOwnership();
      if (!hasAccess) return;

      const medicationsQuery = query(
        collection(db, 'medications'),
        where('petId', '==', petId),
        where('userId', '==', user.uid),
        orderBy('date', 'desc')
      );

      const unsubscribe = onSnapshot(
        medicationsQuery,
        (snapshot) => {
          const medicationsData: MedicalRecord[] = [];
          snapshot.forEach((doc) => {
            medicationsData.push({ 
              id: doc.id,
              ...doc.data(),
              // Convert Firestore Timestamps to strings
              createdAt: doc.data().createdAt instanceof Timestamp 
                ? doc.data().createdAt.toDate().toISOString()
                : doc.data().createdAt,
              updatedAt: doc.data().updatedAt instanceof Timestamp 
                ? doc.data().updatedAt.toDate().toISOString()
                : doc.data().updatedAt,
            } as MedicalRecord);
          });
          setMedications(medicationsData);
          setIsLoading(false);
        },
        (error) => {
          console.error('Error fetching medications:', error);
          toast({
            variant: "destructive",
            title: "Error",
            description: "Could not load medications. Please try again."
          });
          setIsLoading(false);
        }
      );

      return () => unsubscribe();
    };

    setupMedications();
  }, [petId, user, toast, router]);

  const activeMedications = medications.filter(
    med => med.status === 'active' && (!med.nextDueDate || isAfter(parseISO(med.nextDueDate), new Date()))
  );

  const pastMedications = medications.filter(
    med => med.status !== 'active' || (med.nextDueDate && !isAfter(parseISO(med.nextDueDate), new Date()))
  );

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading size={32} />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Medications</h1>
          <p className="text-muted-foreground">
            Manage your pet's medications and treatments
          </p>
        </div>
        <AddMedicationDialog petId={petId} petName={petName}>
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            Add Medication
          </Button>
        </AddMedicationDialog>
      </div>

      <Tabs defaultValue="active" className="space-y-4">
        <TabsList>
          <TabsTrigger value="active">
            Active ({activeMedications.length})
          </TabsTrigger>
          <TabsTrigger value="past">
            Past ({pastMedications.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="active">
          <ScrollArea className="h-[calc(100vh-16rem)]">
            <div className="space-y-4">
              {activeMedications.length === 0 ? (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                    <Pill className="h-8 w-8 text-muted-foreground mb-4" />
                    <p className="text-lg font-medium">No active medications</p>
                    <p className="text-sm text-muted-foreground mb-4">
                      Add a new medication for your pet
                    </p>
                    <AddMedicationDialog petId={petId} petName={petName}>
                      <Button>
                        <Plus className="mr-2 h-4 w-4" />
                        Add Medication
                      </Button>
                    </AddMedicationDialog>
                  </CardContent>
                </Card>
              ) : (
                activeMedications.map((medication) => (
                  <MedicationCard 
                    key={medication.id}
                    medication={medication}
                    isActive={true}
                  />
                ))
              )}
            </div>
          </ScrollArea>
        </TabsContent>

        <TabsContent value="past">
          <ScrollArea className="h-[calc(100vh-16rem)]">
            <div className="space-y-4">
              {pastMedications.length === 0 ? (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-8 text-center">
                    <Pill className="h-8 w-8 text-muted-foreground mb-4" />
                    <p className="text-lg font-medium">No past medications</p>
                    <p className="text-sm text-muted-foreground">
                      Past and completed medications will appear here
                    </p>
                  </CardContent>
                </Card>
              ) : (
                pastMedications.map((medication) => (
                  <MedicationCard 
                    key={medication.id}
                    medication={medication}
                    isActive={false}
                  />
                ))
              )}
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
}

========================================
app/(protected)/pets/[id]/medications/page.tsx
========================================
// app/(protected)/pets/[id]/medications/page.tsx
import { Suspense } from 'react';
import { MedicationsClient } from './medications-client';
import { Loading } from '@/components/ui/loading';

interface MedicationsPageProps {
  params: {
    id: string;
  };
}

export default function MedicationsPage({ params }: MedicationsPageProps) {
  return (
    <Suspense fallback={<Loading />}>
      <MedicationsClient petId={params.id} />
    </Suspense>
  );
}

========================================
app/(protected)/pets/[id]/notes/page.tsx
========================================
// app/pets/[id]/notes/page.tsx

'use client';

import React from 'react';

export default function NotesPage() {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold">Notes</h1>
      <p className="mt-4 text-gray-600">Coming soon...</p>
    </div>
  );
}


